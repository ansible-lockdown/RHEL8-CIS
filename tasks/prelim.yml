---
# Preliminary tasks that should always be run

- name: "PRELIM | PATCH | Add the required packages"
  tags:
      - always
  ansible.builtin.package:
      name:
          - python3-libselinux
          - python3-rpm
      state: present

- name: "PRELIM | AUDIT | Interactive Users"
  tags:
      - always
  ansible.builtin.shell: >
      grep -E -v '^(root|halt|sync|shutdown)' /etc/passwd | awk -F: '(!index($7, "sbin/nologin") && $7 != "/bin/nologin" && $7 != "/bin/false" && $7 != "/dev/null") { print $1 }'
  changed_when: false
  register: prelim_interactive_usernames

- name: "PRELIM | AUDIT | Interactive User accounts home directories"
  tags:
      - always
  ansible.builtin.shell: >
      grep -E -v '^(root|halt|sync|shutdown)' /etc/passwd | awk -F: '(!index($7, "sbin/nologin") && $7 != "/bin/nologin" && $7 != "/bin/false" && $7 != "/dev/null") { print $6 }'
  changed_when: false
  register: prelim_interactive_users_home

- name: "PRELIM | AUDIT | Interactive UIDs"
  tags:
      - always
  ansible.builtin.shell: >
      grep -E -v '^(root|halt|sync|shutdown)' /etc/passwd | awk -F: '(!index($7, "sbin/nologin") && $7 != "/bin/nologin" && $7 != "/bin/false") { print $3 }'
  changed_when: false
  register: prelim_interactive_uids

- name: "PRELIM | Discover Interactive UID MIN and MIN from logins.def"
  block:
      - name: "PRELIM | Capture UID_MIN information from logins.def"
        ansible.builtin.shell: grep -w "^UID_MIN" /etc/login.defs | awk '{print $NF}'
        changed_when: false
        register: prelim_uid_min_id

      - name: "PRELIM | Capture UID_MAX information from logins.def"
        ansible.builtin.shell: grep -w "^UID_MAX" /etc/login.defs | awk '{print $NF}'
        changed_when: false
        register: prelim_uid_max_id

      - name: "PRELIM | set_facts for interactive uid/gid"
        ansible.builtin.set_fact:
            min_int_uid: "{{ prelim_uid_min_id.stdout }}"
            max_int_uid: "{{ prelim_uid_max_id.stdout }}"

- name: "PRELIM | AUDIT | Set facts based on boot type"
  tags:
      - always
  block:
      - name: "PRELIM | AUDIT | Check whether machine is UEFI-based"
        ansible.builtin.stat:
            path: /sys/firmware/efi
        register: prelim_efi_boot

      - name: "PRELIM | AUDIT | set legacy boot and grub path fact | Bios"
        when: not prelim_efi_boot.stat.exists
        ansible.builtin.set_fact:
            rhel8cis_legacy_boot: true
            grub2_path: /etc/grub2.cfg
            rhel8cis_boot_path: /boot/grub2/

      - name: "PRELIM | AUDIT | set grub fact | UEFI"
        when: prelim_efi_boot.stat.exists
        ansible.builtin.set_fact:
            grub2_path: /etc/grub2-efi.cfg
            rhel8cis_boot_path: "/boot/efi/EFI/{{ansible_facts.distribution | lower }}/"

- name: "PRELIM | AUDIT | Ensure permissions on bootloader config are configured | Get grub config file stats"
  tags:
      - always
  ansible.builtin.stat:
      path: "{{ grub2_path }}"
  changed_when: false
  register: prelim_grub_cfg

- name: "PRELIM | AUDIT | Gather the package facts before prelim"
  tags:
      - always
  ansible.builtin.package_facts:
      manager: auto

- name: Include audit specific variables
  when:
      - run_audit or audit_only
      - setup_audit
  tags:
      - setup_audit
      - run_audit
  ansible.builtin.include_vars:
      file: audit.yml

- name: Include pre-remediation audit tasks
  when:
      - run_audit or audit_only
      - setup_audit
  tags:
      - run_audit
  ansible.builtin.import_tasks:
      file: pre_remediation_audit.yml

##### Section requirements #####
- name: "PRELIM | AUDIT | Section 1.1 | Create list of mount points"
  tags:
      - always
  ansible.builtin.set_fact:
      mount_names: "{{ ansible_mounts | map(attribute='mount') | list }}"

- name: "PRELIM | AUDIT | Ensure /dev/shm is a separate partition | discover"
  when:
      - rhel8cis_rule_1_1_2_2_1 or
        rhel8cis_rule_1_1_2_2_2 or
        rhel8cis_rule_1_1_2_2_3 or
        rhel8cis_rule_1_1_2_2_4
  tags:
      - always
  ansible.builtin.shell: findmnt -kn /dev/shm
  changed_when: false
  failed_when: prelim_dev_shm_present.rc not in [ 0, 1 ]
  register: prelim_dev_shm_present

- name: "PRELIM | AUDIT | systemd coredump file check"
  when:
      - rhel8cis_rule_1_4_4
  tags:
      - always
  ansible.builtin.stat:
      path: /etc/systemd/coredump.conf
  register: prelim_systemd_coredump

- name: "PRELIM | AUDIT | Ensure crypto-policies-scripts package is installed"
  when: "'crypto-policies-scripts' not in ansible_facts.packages"
  tags:
      - always
  ansible.builtin.package:
      name: crypto-policies-scripts
      state: installed

- name: "PRELIM | AUDIT | Gather system-wide crypto-policy settings"
  tags:
      - always
  block:
      - name: "PRELIM | AUDIT | Gather system-wide crypto-policy settings"
        ansible.builtin.shell: 'update-crypto-policies --show'
        changed_when: false
        check_mode: false
        register: prelim_system_wide_crypto_policy

      - name: "PRELIM | AUDIT | Gather system-wide crypto-policy | set fact for crypto policy"
        ansible.builtin.set_fact:
            current_crypto_policy: "{{ prelim_system_wide_crypto_policy.stdout.split(':')[0] }}"

      - name: "PRELIM | AUDIT | Gather system-wide crypto-policy module | set fact for crypto submodule"
        when: "':' in prelim_system_wide_crypto_policy.stdout"
        ansible.builtin.set_fact:
            current_crypto_module: "{{ prelim_system_wide_crypto_policy.stdout.split(':')[1] }}"

- name: "PRELIM | PATCH | Install dconf if gui"
  when:
      - "'gdm' in ansible_facts.packages"
      - "'dconf' not in ansible_facts.packages"
      - rhel8cis_gui
  tags:
      - always
  ansible.builtin.package:
      name: dconf
      state: present

- name: "PRELIM | PATCH | Cron Package"
  when: "'cronie' not in ansible_facts.packages"
  tags:
      - always
  ansible.builtin.package:
      name: cronie
      state: present

- name: "PRELIM | AUDIT | Find all sudoers files."
  when:
      - rhel8cis_rule_4_3_4 or
        rhel8cis_rule_4_3_5
  tags:
      - always
  ansible.builtin.shell: "find /etc/sudoers /etc/sudoers.d/ -type f ! -name '*~' ! -name '*.*'"
  changed_when: false
  failed_when: false
  check_mode: false
  register: prelim_sudoers_files

- name: "PRELIM | AUDIT | Check pam package versions"
  when:
      - "'pam' in ansible_facts.packages"
      - rhel8cis_rule_4_4_1_1
  tags:
      - always
  vars:
      warn_control_id: 'pam_pkg_version_too_low'
      pam_pkg_version: 1.3.1
      pam_pkg_release: 25
  block:
      - name: "PRELIM | AUDIT | Check pam package versions | set fact"
        when:
            - ansible_facts.packages.pam[0].version is version(pam_pkg_version, '>=')
            - ansible_facts.packages.pam[0].release is version (pam_pkg_release, '>=')
        ansible.builtin.set_fact:
            pam_version: OK

      - name: "PRELIM | WARNING | Check pam package versions | Warning"
        when:
            - ansible_facts.packages.pam[0].version is version(pam_pkg_version, '<')
            - ansible_facts.packages.pam[0].release is version (pam_pkg_release, '<')
        ansible.builtin.debug:
            msg: "Warning!! Authselect controls won't run as pam package version too low"

      - name: "PRELIM | WARNING | Check pam package versions | Warning"
        when:
            - ansible_facts.packages.pam[0].version is version(pam_pkg_version, '<')
            - ansible_facts.packages.pam[0].release is version (pam_pkg_release, '<')
        ansible.builtin.import_tasks:
            file: warning_facts.yml

- name: "PRELIM | AUDIT | Check authselect package versions"
  when:
      - "'authselect' in ansible_facts.packages"
      - rhel8cis_rule_4_4_1_2
  tags:
      - always
      - authselect
  vars:
      warn_control_id: 'authselect_pkg_version_too_low'
      authselect_pkg_version: 1.2.6
  block:
      - name: "PRELIM | AUDIT | Check authselect package versions | set fact"
        when: ansible_facts.packages.authselect[0].version is version(authselect_pkg_version, '>=')
        ansible.builtin.set_fact:
            authselect_version: OK

      - name: "PRELIM | WARNING | Check authselect package versions | Warning"
        when: ansible_facts.packages.authselect[0].version is version(authselect_pkg_version, '<')
        ansible.builtin.debug:
            msg: "Warning!! Authselect controls won't run as authselect pkg version too low"

      - name: "PRELIM | WARNING | Check authselect package versions | Warning"
        when: ansible_facts.packages.authselect[0].version is version(authselect_pkg_version, '<')
        ansible.builtin.import_tasks:
            file: warning_facts.yml

- name: "PRELIM | AUDIT | Interactive User accounts home directories"
  tags:
      - always
  ansible.builtin.shell: >
      grep -E -v '^(root|halt|sync|shutdown)' /etc/passwd | awk -F: '(!index($7, "sbin/nologin") && $7 != "/bin/nologin" && $7 != "/bin/false") { print $6 }'
  changed_when: false
  register: prelim_interactive_users_home

- name: "PRELIM | PATCH | Section 5.1 | Configure System Accounting (auditd)"
  when:
      - rhel8cis_level_2
      - "'audit' not in ansible_facts.packages"
  tags:
      - always
  ansible.builtin.package:
      name: audit
      state: present

- name: "PRELIM | AUDIT | 5.2.4.x | Ensure audit log files are mode 0640 or less permissive | discover file"
  ansible.builtin.shell: "grep ^log_file /etc/audit/auditd.conf | awk '{ print $NF }'"
  changed_when: false
  failed_when: prelim_audit_logfile.rc not in [0, 1]
  register: prelim_audit_logfile
  when:
      - rhel8cis_rule_5_2_4_1
      - rhel8cis_rule_5_2_4_2
      - rhel8cis_rule_5_2_4_3
      - rhel8cis_rule_5_2_4_4
  tags:
      - level2-server
      - level2-workstation
      - patch
      - auditd
      - rule_5.2.4.1
      - rule_5.2.4.2
      - rule_5.2.4.3
      - rule_5.2.4.4

- name: "PRELIM | AUDIT | 5.2.4.5/6/7 | Audit conf and rules files | list files"
  when:
      - rhel8cis_rule_5_2_4_5 or
        rhel8cis_rule_5_2_4_6 or
        rhel8cis_rule_5_2_4_7
  tags:
      - level2-server
      - level2-workstation
      - patch
      - auditd
      - rule_5.2.4.5
      - rule_5.2.4.6
      - rule_5.2.4.7
  ansible.builtin.find:
      path: /etc/audit
      file_type: file
      recurse: true
      patterns: '*.conf,*.rules'
  register: prelim_auditd_conf_files

- name: "PRELIM | AUDIT | Gather UID 0 accounts other than root"
  when:
      - rhel8cis_rule_6_2_9
  tags:
      - always
  ansible.builtin.shell: "cat /etc/passwd | awk -F: '($3 == 0 && $1 != \"root\") {i++;print $1 } END {exit 1}'"
  failed_when: prelim_uid_zero_accounts_except_root.rc not in [ 0, 1 ]
  changed_when: false
  check_mode: false
  register: prelim_uid_zero_accounts_except_root

##### Optional #####

- name: "PRELIM | Optional | If IPv6 disable to stop ssh listening"
  when:
      - rhel8cis_ipv6_sshd_disable
      - not rhel8cis_ipv6_required
  tags:
      - always
  ansible.builtin.lineinfile:
      path: /etc/ssh/sshd_config
      regexp: ^AddressFamily
      line: AddressFamily inet
  notify: Restart_sshd

- name: "PRELIM | Optional | If IPv6 disable to stop chronyd listening"
  when:
      - rhel8cis_ipv6_chrony_disable
      - not rhel8cis_ipv6_required
  tags:
      - always
  notify: Restart_chronyd
  block:
      - name: "PRELIM | Optional | If IPv6 disable to stop chronyd listening | Check existence"
        ansible.builtin.shell: grep -E "OPTIONS=.*-4" /etc/sysconfig/chronyd
        changed_when: false
        failed_when: prelim_chrony_ipv6_exists.rc not in [ 0, 1]
        register: prelim_chrony_ipv6_exists

      - name: "PRELIM | Optional | If IPv6 disable to stop chronyd listening"
        when: prelim_chrony_ipv6_exists.stdout | length == 0
        ansible.builtin.lineinfile:
            path: /etc/sysconfig/chronyd
            regexp: '^OPTIONS="(?!.* -4.*)(.*)"'
            line: OPTIONS="\1 -4"
            backrefs: true

# Optional extra keys to extend auditd not part of CIS but can influence a system
# e.g. admin_space_left: '10%'

- name: PRELIM | Optional | Configure other keys for auditd.conf
  when:
      - rhel8cis_auditd_extra_conf.keys() | length > 0
      - rhel8cis_level_2
  tags:
      - always
  ansible.builtin.lineinfile:
      path: /etc/audit/auditd.conf
      regexp: "^{{ item }}( |=)"
      line: "{{ item }} = {{ rhel8cis_auditd_extra_conf[item] }}"
  notify: Restart_auditd
  loop: "{{ rhel8cis_auditd_extra_conf.keys() }}"
